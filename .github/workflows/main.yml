name: 多环境CI/CD流水线

on:
  push:
    branches: [ main, develop ]  # ✅ 修复：监听两个分支
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # 测试任务（两个分支都运行）
  test:
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 🔍 检查必要文件
      run: |
        echo "检查网站文件是否完整..."
        files=("index.html" "style.css" "script.js")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file 存在"
          else
            echo "❌ $file 缺失"
            exit 1
          fi
        done
    
    - name: 🧪 HTML语法检查
      run: |
        echo "检查HTML基本语法..."
        # 检查HTML标签是否配对
        if grep -q "<html>" index.html && grep -q "</html>" index.html; then
          echo "✅ HTML标签检查通过"
        else
          echo "❌ HTML标签不完整"
          exit 1
        fi
        
        # 检查是否有标题
        if grep -q "<title>" index.html; then
          echo "✅ 页面标题存在"
        else
          echo "❌ 缺少页面标题"
          exit 1
        fi
    
    - name: 📊 分支信息显示
      run: |
        echo "🌿 当前分支: ${GITHUB_REF#refs/heads/}"
        echo "💻 触发事件: ${{ github.event_name }}"
        echo "👤 提交者: ${{ github.actor }}"
        echo "📈 代码统计："
        echo "HTML文件行数: $(wc -l < index.html)"
        echo "CSS文件行数: $(wc -l < style.css)" 
        echo "JS文件行数: $(wc -l < script.js)"
    
    - name: 🎯 运行自定义测试
      run: |
        if [ -f "tests/test.js" ]; then
          echo "运行自定义测试..."
          node tests/test.js
        else
          echo "没有找到自定义测试，跳过"
        fi

  # ✅ 新增：开发环境部署（develop分支触发）
  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 🔧 配置开发环境
      run: |
        echo "🚧 配置开发环境..."
        echo "- 分支: develop"
        echo "- 环境: Development"
        echo "- 特性: 调试模式开启"
        
        # 如果有config/dev.js，使用开发配置
        if [ -f "config/dev.js" ]; then
          echo "✅ 发现开发配置文件"
          # 替换配置引用
          sed -i 's|config/prod.js|config/dev.js|g' index.html
        fi
        
        # 添加开发环境标识
        sed -i 's|<title>\(.*\)</title>|<title>[DEV] \1</title>|g' index.html
    
    - name: 🚀 模拟开发环境部署
      run: |
        echo "🚧 正在部署到开发环境..."
        echo "📝 开发环境信息:"
        echo "  - 环境标识: 蓝色背景 + 开发横幅"
        echo "  - 调试模式: 开启"
        echo "  - 版本: $(grep -o 'v[0-9.]*-dev' config/dev.js || echo 'dev版本')"
        echo "✅ 开发环境部署完成！"
        echo "🌐 开发环境地址: https://dev-${GITHUB_REPOSITORY##*/}.example.com （模拟）"
        echo "👥 可供团队内部测试使用"

  # ✅ 修改：生产环境部署（main分支触发）
  deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: ⚙️ 配置生产环境
      run: |
        echo "🏭 配置生产环境..."
        echo "- 分支: main"
        echo "- 环境: Production"
        echo "- 特性: 优化性能，关闭调试"
        
        # 确保使用生产配置（默认已经是prod.js）
        if [ -f "config/prod.js" ]; then
          echo "✅ 使用生产配置文件"
        fi
    
    - name: 🏭 生产环境优化
      run: |
        echo "执行生产环境优化..."
        echo "✅ 配置验证完成"
        echo "✅ 性能优化完成"
        echo "✅ 安全检查完成"
      
    - name: 配置GitHub Pages
      uses: actions/configure-pages@v5
      
    - name: 上传文件
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./
        
    - name: 🚀 部署到生产环境
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: 🎉 生产部署成功
      run: |
        echo "✅ 生产环境部署成功！"
        echo "🌐 生产地址: ${{ steps.deployment.outputs.page_url }}"
        echo "👥 用户可以正常访问"
        echo "📊 版本: $(grep -o 'v[0-9.]*' config/prod.js || echo '正式版')"
